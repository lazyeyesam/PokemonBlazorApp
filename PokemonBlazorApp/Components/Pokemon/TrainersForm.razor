@rendermode InteractiveServer
@inject DatabaseContext Context

<div class="card">
    <div class="card-body bg-light">
        <h4 class="card-title">@(Model.Id == 0 ? "Add Trainer" : "Edit Trainer")</h4>
        <EditForm OnValidSubmit="Submit" EditContext="editContext">
            <DataAnnotationsValidator />
            <div class="row g-3">
                <div class="col-md-6">
                    <label for="name" class="form-label">Name</label>
                    <InputText class="form-control" placeholder="Name" @bind-Value="Model.Name" />
                    <ValidationMessage For="@(() => Model.Name)" />
                </div>
                <div class="col-md-6">
                    <label for="type" class="form-label">Companion</label>
                    <InputSelect class="form-select" placeholder="Companion" @bind-Value="companionId">
                        @foreach (var pokemon in pokemons)
                        {
                            <option value="@pokemon.Id">@pokemon.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => Model.Companion)" />
                </div>
                <div class="col-md-12">
                    <button type="submit" class="btn btn-primary float-end">@(Model.Id == 0 ? "Add Trainer" : "Save Changes")</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnSaved { get; set; }

    [Parameter]
    public Trainer Model
    {
        get
        {
            return model;
        }
        set
        {
            model = value ?? new Trainer();
            if (model.Companion is null)
                model.Companion = new Pokemon();
            companionId = model.Companion.Id;
            editContext = new(model);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        pokemons = await Context.Pokemons.OrderBy(p => p.Name).ToListAsync();
    }

    private Trainer model;
    private EditContext editContext;
    private List<Pokemon> pokemons;
    private int companionId;


    private async Task Submit()
    {
        Model.Companion = pokemons.Single(p => p.Id == companionId);

        if (Model.Id == 0)
            Context.Trainers.Add(Model);
        else
            Context.Trainers.Update(Model);

        await Context.SaveChangesAsync();
        await OnSaved.InvokeAsync();
    }
}