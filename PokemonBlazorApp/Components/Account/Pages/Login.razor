@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PokemonBlazorApp.Components.Account.Shared

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="card">
    <div class="card-body bg-light">
        <h4 class="card-title">Login</h4>
        <StatusMessage Message="@errorMessage" />
        <EditForm OnValidSubmit="LoginUser" Model="Model" FormName="loginForm">
            <DataAnnotationsValidator />
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="name" class="form-label">Email</label>
                    <InputText class="form-control" placeholder="Email" @bind-Value="Model.Email" />
                    <ValidationMessage For="@(() => Model.Email)" />
                </div>
                <div class="col-md-3">
                    <label for="name" class="form-label">Password</label>
                    <InputText type="password" class="form-control" placeholder="Email" @bind-Value="Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
            </div>
            <div class="row g-3 mt-1">
                <div class="col-md-3">
                    <button type="submit" class="btn btn-primary">Login</button>
                    <a href="@(NavigationManager.ToAbsoluteUri("Account/Register"))" class="btn btn-success">Register</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Model { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Model.Email, Model.Password, false, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
