@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer
@inject DatabaseContext Context

@if (pokemons == null)
{
    <p>Loading...</p>
}
else
{
    <div>
        <QuickGrid Theme="pokemon" Class="table" Items="@FilteredPokemon" Pagination="@pagination">
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Name)" Sortable="true">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameSearch" @bind:event="oninput" placeholder="Pokemon name..." />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="@(p => p.Total)" Sortable="true" />
            <PropertyColumn Property="@(p => p.HP)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Attack)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Defence)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Speed)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Generation)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Legendary)" Sortable="true" />
            <TemplateColumn Title="Edit">
                <button class="btn btn-success" @onclick="() => Edit(context)">Edit</button>
            </TemplateColumn>
            <TemplateColumn Title="Delete">
                <button class="btn btn-danger" @onclick="() => Delete(context)">Delete</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>

    <div>
        @* <table class="table">
    <thead>
    <tr>
    <th scope="col">#</th>
    <th scope="col">Name</th>
    <th scope="col">Type</th>
    <th scope="col">Total</th>
    <th scope="col">HP</th>
    <th scope="col">Attack</th>
    <th scope="col">Defence</th>
    <th scope="col">Speed</th>
    <th scope="col">Generation</th>
    <th scope="col">Legendary</th>
    <th scope="col">Edit</th>
    <th scope="col">Delete</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var pokemon in pokemons)
    {
    <tr>
    <td>@pokemon.Id</td>
    <td>@pokemon.Name</td>
    <td>@pokemon.Type</td>
    <td>@pokemon.Total</td>
    <td>@pokemon.HP</td>
    <td>@pokemon.Attack</td>
    <td>@pokemon.Defence</td>
    <td>@pokemon.Speed</td>
    <td>@pokemon.Generation</td>
    <td>@pokemon.Legendary</td>
    <td>
    <button class="btn btn-success" @onclick="() => Edit(pokemon)">Edit</button>
    </td>
    <td>
    <button class="btn btn-danger" @onclick="() => Delete(pokemon)">Delete</button>
    </td>
    </tr>
    }
    </tbody>
    </table> *@
    </div>

}

@code {

    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private string nameSearch;

    [Parameter]
    public EventCallback<Pokemon> OnEditClicked { get; set; }

    private IQueryable<Pokemon>? pokemons;
    private IQueryable<Pokemon>? FilteredPokemon
    {
        get
        {
            IQueryable<Pokemon>? filtered = pokemons;
            if (!string.IsNullOrEmpty(nameSearch))
            {
                filtered = filtered?.Where(c => c.Name.Contains(nameSearch, StringComparison.CurrentCultureIgnoreCase));
            }
            return filtered;

        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetPokemon();
    }

    public async Task Refresh()
    {
        await GetPokemon();
        StateHasChanged();
    }

    private async Task GetPokemon()
    {
        pokemons = (await Context.Pokemons.ToListAsync()).AsQueryable();
    }

    private void Edit(Pokemon pokemon)
    {
        OnEditClicked.InvokeAsync(pokemon);
    }

    private async void Delete(Pokemon pokemon)
    {
        Context.Pokemons.Remove(pokemon);
        await Context.SaveChangesAsync();
        await Refresh();
    }
}
